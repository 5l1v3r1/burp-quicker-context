package net.bytebutcher.burp.quicker.context.gui.keystroke;

import burp.BurpExtender;
import com.google.common.collect.Sets;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import net.bytebutcher.burp.util.DialogUtil;
import net.bytebutcher.burp.util.ImageUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.Set;

public class KeyBindingManagerDialog extends JDialog {
    private final KeyStrokeManager keyStrokeManager;
    private JPanel contentPane;
    private JTabbedPane tabbedPane1;
    private JLabel lblKeyboard;
    private KeyStroke keyStroke;
    private JLabel lblShortcut;

    private Set<Integer> ignoredKeyCodes = Sets.newHashSet(Arrays.asList(
            KeyEvent.VK_CANCEL,
            KeyEvent.VK_CLEAR,
            KeyEvent.VK_SHIFT,
            KeyEvent.VK_CONTROL,
            KeyEvent.VK_ALT,
            KeyEvent.VK_CAPS_LOCK,
            KeyEvent.VK_ESCAPE,
            KeyEvent.VK_ALT_GRAPH
    ));
    private KeyEventDispatcher dispatcher;
    private BurpExtender burpExtender;


    public KeyBindingManagerDialog(JFrame parent, KeyStrokeManager keyStrokeManager) {
        this.keyStrokeManager = keyStrokeManager;
        setContentPane(contentPane);
        this.lblKeyboard.setIcon(ImageUtil.createImageIcon("/dialog_keyboard.png", "", 300, 200));
        setTitle("Enter new shortcut...");
        setModal(true);
        pack();
        setLocation(DialogUtil.getX(parent, this), DialogUtil.getY(parent, this));
    }

    public KeyStroke getKeyStroke() {
        return keyStroke;
    }

    public boolean run() {
        try {
            this.keyStrokeManager.push(k -> {
                    if (k.getKeyCode() == KeyEvent.VK_ESCAPE) {
                        dispose();
                    }

                    if (k.getKeyCode() != 0 && isValidKeyStroke(k)) {
                        setKeyStroke(k);
                        dispose();
                    }
                });
            this.setVisible(true);
        } finally {
            this.keyStrokeManager.pop();
        }
        return keyStroke != null;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Enter the new shortcut");
        panel1.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lblShortcut = new JLabel();
        lblShortcut.setForeground(new Color(-7895161));
        lblShortcut.setText("Press Esc to cancel.");
        panel1.add(lblShortcut, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lblKeyboard = new JLabel();
        lblKeyboard.setText("");
        panel1.add(lblKeyboard, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    public boolean isValidKeyStroke(KeyStroke keyStroke) {
        return !ignoredKeyCodes.contains(keyStroke.getKeyCode());
    }

    public void setKeyStroke(KeyStroke keyStroke) {
        this.keyStroke = keyStroke;
    }
}
